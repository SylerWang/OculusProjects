// Geometric Tools LLC, Redmond WA 98052
// Copyright (c) 1998-2014
// Distributed under the Boost Software License, Version 1.0.
// http://www.boost.org/LICENSE_1_0.txt
// http://www.geometrictools.com/License/Boost/LICENSE_1_0.txt
// File Version: 1.4.0 (2014/09/14)

#pragma once

#include "GteParticleSystem.h"

namespace gte
{

template <int N, typename Real>
class MassSpringCurve : public ParticleSystem<N, Real>
{
public:
    // Construction and destruction.  This class represents a set of N-1
    // springs connecting N masses that lie on a curve.
    virtual ~MassSpringCurve();
    MassSpringCurve(int numParticles, Real step);

    // Member access.  The parameters are spring constant and spring resting
    // length.
    inline int GetNumSprings() const;
    inline void SetConstant(int i, Real constant);
    inline void SetLength(int i, Real length);
    inline Real const& GetConstant(int i) const;
    inline Real const& GetLength(int i) const;

    // The default external force is zero.  Derive a class from this one to
    // provide nonzero external forces such as gravity, wind, friction,
    // and so on.  This function is called by Acceleration(...) to compute
    // the impulse F/m generated by the external force F.
    virtual Vector<N, Real> ExternalAcceleration(int i, Real time,
        std::vector<Vector<N, Real>> const& position,
        std::vector<Vector<N, Real>> const& velocity);

protected:
    // Callback for acceleration (ODE solver uses x" = F/m) applied to
    // particle i.  The positions and velocities are not necessarily
    // mPosition and mVelocity, because the ODE solver evaluates the
    // impulse function at intermediate positions.
    virtual Vector<N, Real> Acceleration(int i, Real time,
        std::vector<Vector<N, Real>> const& position,
        std::vector<Vector<N, Real>> const& velocity);

    std::vector<Real> mConstant, mLength;
};

#include "GteMassSpringCurve.inl"

}
